parameters:
  Architecture: 'x64'
  BuildConfiguration: 'release'
  JobName: 'build_windows'

jobs:
- job: build_windows_${{ parameters.Architecture }}_${{ parameters.BuildConfiguration }}
  displayName: Build_Windows_${{ parameters.Architecture }}_${{ parameters.BuildConfiguration }}
  condition: succeeded()
  pool:
    type: windows
  variables:
  - name: runCodesignValidationInjection
    value: false
  - name: NugetSecurityAnalysisWarningLevel
    value: none
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: 1
  - group: DotNetPrivateBuildAccess
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: ob_sdl_codeSignValidation_enabled
    value: false
  - name: ob_sdl_binskim_enabled
    value: true
  - name: ob_sdl_tsa_configFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\tsaoptions.json
  - name: ob_sdl_credscan_suppressionsFile
    value: $(Build.SourcesDirectory)\PowerShell\.config\suppress.json
  - name: Architecture
    value: ${{ parameters.Architecture }}
  - name: BuildConfiguration
    value: ${{ parameters.BuildConfiguration }}
  - name: ob_sdl_sbom_packageName
    value: 'Microsoft.Powershell.Windows.${{ parameters.Architecture }}'
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    - name: ob_sdl_codeql_compiled_enabled
      value: true

  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

  - template: /.pipelines/templates/SetVersionVariables.yml@self
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)

  - template: /.pipelines/templates/cloneToOfficialPath.yml@self

  - template: /.pipelines/templates/insert-nuget-config-azfeed.yml@self
    parameters:
      repoRoot: $(PowerShellRoot)

  - task: CodeQL3000Init@0 # Add CodeQL Init task right before your 'Build' step.
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    env:
      ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
    inputs:
      Enabled: true
      AnalyzeInPipeline: true
      Language: csharp

  - pwsh: |
      $runtime = switch ($env:Architecture)
        {
          "x64" { "win7-x64" }
          "x86" { "win7-x86" }
          "arm64" { "win-arm64" }
          "fxdependent" { "fxdependent" }
          "fxdependentWinDesktop" { "fxdependent-win-desktop" }
        }

      $params = @{}
      if ($env:BuildConfiguration -eq 'minSize') {
        $params['ForMinimalSize'] = $true
      }

      $vstsCommandString = "vso[task.setvariable variable=Runtime]$runtime"
      Write-Host ("sending " + $vstsCommandString)
      Write-Host "##$vstsCommandString"

      Write-Verbose -Message "Building PowerShell with Runtime: $runtime for '$env:BuildConfiguration' configuration"
      Import-Module -Name $(PowerShellRoot)/build.psm1 -Force
      $buildWithSymbolsPath = New-Item -ItemType Directory -Path $(Pipeline.Workspace)/Symbols_$(Architecture) -Force

      Start-PSBootstrap -Package
      $null = New-Item -ItemType Directory -Path $buildWithSymbolsPath -Force -Verbose
      Start-PSBuild -Runtime $runtime -Configuration Release -Output $buildWithSymbolsPath -Clean -PSModuleRestore @params

      $outputPath = Join-Path '$(ob_outputDirectory)' 'psoptions'
      $null = New-Item -ItemType Directory -Path $outputPath -Force
      $psOptPath = "$outputPath/psoptions.json"
      Save-PSOptions -PSOptionsPath $psOptPath

      Write-Verbose -Verbose "Verifying pdbs exist in build folder"
      $pdbs = Get-ChildItem -Path $buildWithSymbolsPath -Recurse -Filter *.pdb
      if ($pdbs.Count -eq 0) {
        Write-Error -Message "No pdbs found in build folder"
      }
      else {
        Write-Verbose -Verbose "Found $($pdbs.Count) pdbs in build folder"
        $pdbs | ForEach-Object {
          Write-Verbose -Verbose "Pdb: $($_.FullName)"
        }
      }

      Write-Verbose -Verbose "Completed building PowerShell for '$env:BuildConfiguration' configuration"
    displayName: 'Build Windows Universal - $(Architecture)-$(BuildConfiguration) Symbols folder'
    env:
      __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)
      ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.

  - task: CodeQL3000Finalize@0 # Add CodeQL Finalize task right after your 'Build' step.
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    env:
      ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.

  - pwsh: |
      $platform = 'windows'
      $vstsCommandString = "vso[task.setvariable variable=ArtifactPlatform]$platform"
      Write-Host ("sending " + $vstsCommandString)
      Write-Host "##$vstsCommandString"
    displayName: Set artifact platform

  - template: /.pipelines/templates/obp-file-signing.yml@self
    parameters:
      binPath: '$(Pipeline.Workspace)/Symbols_$(Architecture)'

  - template: /.pipelines/templates/step/finalize.yml@self
